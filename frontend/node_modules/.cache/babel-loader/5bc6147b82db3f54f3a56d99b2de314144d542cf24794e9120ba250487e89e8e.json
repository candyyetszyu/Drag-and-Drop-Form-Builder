{"ast":null,"code":"var _jsxFileName = \"/Users/judyyip/Downloads/Website/Marketing Campaign/frontend/src/components/builder/FormBuilderPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { useApi } from '../../hooks/useApi';\nimport { useFormState } from '../../hooks/useFormState';\nimport FieldPalette from './FieldPalette';\nimport FormCanvas from './FormCanvas';\nimport FieldConfigPanel from './FieldConfigPanel';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormBuilderPage = () => {\n  _s();\n  // Add a ref for the field configuration section\n  const configSectionRef = useRef(null);\n  const [fields, setFields] = useState([]);\n  const [selectedField, setSelectedField] = useState(null);\n  const [isPreview, setIsPreview] = useState(false);\n  const {\n    loading,\n    error,\n    post\n  } = useApi();\n  const {\n    formValues,\n    handleInputChange\n  } = useFormState({\n    title: 'Untitled Form',\n    description: ''\n  });\n\n  // Add form errors state\n  const [formErrors, setFormErrors] = useState({});\n  const handleAddField = fieldType => {\n    console.log(\"Adding field of type:\", fieldType);\n\n    // Create a new field based on type\n    const newField = {\n      id: Date.now().toString(),\n      type: fieldType,\n      question: `New ${fieldType} question`,\n      isRequired: false\n    };\n\n    // Add type-specific properties\n    if (fieldType === 'dropdown') {\n      newField.options = [{\n        value: 'Option 1',\n        label: 'Option 1'\n      }, {\n        value: 'Option 2',\n        label: 'Option 2'\n      }];\n    } else if (fieldType === 'table') {\n      newField.columns = [{\n        name: 'Column 1',\n        type: 'text'\n      }, {\n        name: 'Column 2',\n        type: 'text'\n      }];\n    } else if (fieldType === 'text') {\n      newField.minLength = 0;\n      newField.maxLength = 100;\n    }\n\n    // Add field to state\n    setFields(prevFields => [...prevFields, newField]);\n    setSelectedField(newField);\n    console.log(\"Field added:\", newField);\n  };\n  const handleFieldSelection = field => {\n    console.log(\"Selected field:\", field);\n    setSelectedField(field);\n\n    // Scroll to the config section when a field is selected\n    if (configSectionRef.current) {\n      configSectionRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n  const handleFieldUpdate = updatedField => {\n    console.log(\"Updating field:\", updatedField);\n\n    // Check if we're updating a single field or the entire fields array\n    if (Array.isArray(updatedField)) {\n      setFields(updatedField);\n    } else {\n      setFields(prevFields => prevFields.map(field => field.id === updatedField.id ? updatedField : field));\n\n      // Update selected field if it's the one being edited\n      if (selectedField && selectedField.id === updatedField.id) {\n        setSelectedField(updatedField);\n      }\n    }\n  };\n  const handleFieldDelete = fieldId => {\n    console.log(\"Deleting field:\", fieldId);\n    setFields(prevFields => prevFields.filter(field => field.id !== fieldId));\n\n    // Clear selection if the deleted field was selected\n    if (selectedField && selectedField.id === fieldId) {\n      setSelectedField(null);\n    }\n  };\n  const handleSaveForm = async () => {\n    try {\n      // Validate the form before saving\n      const validationErrors = validateFormBeforeSave(fields);\n      if (Object.keys(validationErrors).length > 0) {\n        // Show validation errors\n        setFormErrors(validationErrors);\n        alert(\"Please fix the validation issues before saving the form.\");\n        return;\n      }\n      const formData = {\n        ...formValues,\n        fields\n      };\n      console.log(\"Saving form:\", formData);\n      const result = await post('/forms', formData);\n      alert('Form saved successfully!');\n      return result;\n    } catch (err) {\n      console.error('Error saving form:', err);\n    }\n  };\n\n  // Function to validate form before saving\n  const validateFormBeforeSave = fields => {\n    const errors = {};\n\n    // Check title and description\n    if (!formValues.title) {\n      errors.title = \"Form title is required\";\n    }\n\n    // Check that form has at least one field\n    if (fields.length === 0) {\n      errors.fields = \"Form must have at least one field\";\n    }\n\n    // Validate each field configuration\n    fields.forEach((field, index) => {\n      // Check that field has a question\n      if (!field.question) {\n        errors[`field_${field.id}`] = `Field ${index + 1} must have a question`;\n      }\n\n      // Specific validations for different field types\n      if (field.type === 'dropdown' && (!field.options || field.options.length === 0)) {\n        errors[`field_${field.id}_options`] = `Dropdown field ${index + 1} must have at least one option`;\n      }\n\n      // Validate conditional logic\n      if (field.conditions && field.conditions.length > 0) {\n        field.conditions.forEach((condition, condIndex) => {\n          if (condition.action && !condition.targetId) {\n            errors[`field_${field.id}_condition_${condIndex}`] = `Condition ${condIndex + 1} for field ${index + 1} needs a target question`;\n          }\n        });\n      }\n\n      // Validate field validation rules\n      if (field.validation) {\n        if (field.validation.pattern === 'custom' && !field.validation.customRule) {\n          errors[`field_${field.id}_validation`] = `Custom validation for field ${index + 1} requires a regex pattern`;\n        }\n      }\n    });\n    return errors;\n  };\n  const togglePreview = () => {\n    console.log(\"Toggling preview mode. Current state:\", isPreview);\n    setIsPreview(!isPreview);\n  };\n\n  // Handle dropping field from palette to canvas\n  const handleFieldDrop = (fieldType, index) => {\n    console.log(`Dropped ${fieldType} at index ${index}`);\n\n    // Create new field with the given type\n    const newField = {\n      id: Date.now().toString(),\n      type: fieldType,\n      question: `New ${fieldType} question`,\n      isRequired: false\n    };\n\n    // Add type-specific properties\n    if (fieldType === 'dropdown') {\n      newField.options = [{\n        value: 'Option 1',\n        label: 'Option 1'\n      }, {\n        value: 'Option 2',\n        label: 'Option 2'\n      }];\n    } else if (fieldType === 'table') {\n      newField.columns = [{\n        name: 'Column 1',\n        type: 'text'\n      }, {\n        name: 'Column 2',\n        type: 'text'\n      }];\n    } else if (fieldType === 'text') {\n      newField.minLength = 0;\n      newField.maxLength = 100;\n    }\n\n    // Insert the field at the specified index\n    const newFields = [...fields];\n    if (index !== undefined && index >= 0) {\n      newFields.splice(index, 0, newField);\n    } else {\n      newFields.push(newField);\n    }\n    setFields(newFields);\n    setSelectedField(newField);\n  };\n\n  // Handle reordering fields\n  const handleReorderField = (dragIndex, hoverIndex) => {\n    const draggedField = fields[dragIndex];\n\n    // Create a new array without mutating the original\n    const newFields = [...fields];\n    newFields.splice(dragIndex, 1); // Remove from old position\n    newFields.splice(hoverIndex, 0, draggedField); // Insert at new position\n\n    setFields(newFields);\n  };\n\n  // Function to scroll to configuration section\n  const scrollToConfig = () => {\n    if (configSectionRef.current) {\n      configSectionRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"padding-responsive\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: isPreview ? 'Form Preview' : 'Form Builder'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), !isPreview && selectedField && /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: scrollToConfig,\n          style: {\n            cursor: 'pointer',\n            textDecoration: 'underline',\n            color: '#2563eb',\n            marginTop: '0.5rem',\n            display: 'inline-block'\n          },\n          children: \"Jump to Field Configuration \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '1rem',\n            margin: '1rem 0'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"title\",\n            value: formValues.title,\n            onChange: handleInputChange,\n            className: `input ${formErrors.title ? 'border-red-500' : ''}`,\n            placeholder: \"Form Title\",\n            style: {\n              flex: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary\",\n            onClick: togglePreview,\n            children: isPreview ? 'Edit Form' : 'Preview Form'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: handleSaveForm,\n            disabled: loading,\n            children: loading ? 'Saving...' : 'Save Form'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), formErrors.title && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-500 text-sm\",\n          children: formErrors.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 32\n        }, this), formErrors.fields && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-500 text-sm\",\n          children: formErrors.fields\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 33\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-error\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        style: {\n          display: 'flex',\n          gap: '1rem',\n          minHeight: '500px'\n        },\n        children: [!isPreview && /*#__PURE__*/_jsxDEV(\"aside\", {\n          className: \"padding-responsive\",\n          style: {\n            width: '250px'\n          },\n          children: /*#__PURE__*/_jsxDEV(FieldPalette, {\n            onFieldSelect: handleAddField,\n            onDragDrop: handleFieldDrop\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"padding-responsive\",\n          style: {\n            flex: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(FormCanvas, {\n            fields: fields,\n            isPreview: isPreview,\n            onFieldSelect: handleFieldSelection,\n            onFieldUpdate: handleFieldUpdate,\n            onFieldDelete: handleFieldDelete,\n            onDrop: handleFieldDrop,\n            onReorder: handleReorderField,\n            formId: \"preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), !isPreview && selectedField && /*#__PURE__*/_jsxDEV(\"aside\", {\n          className: \"padding-responsive\",\n          style: {\n            width: '300px',\n            backgroundColor: '#ffffff',\n            border: '1px solid #e5e7eb',\n            borderRadius: '0.5rem',\n            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'\n          },\n          ref: configSectionRef,\n          id: \"field-configuration\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            style: {\n              paddingBottom: '0.5rem',\n              marginBottom: '0.5rem',\n              borderBottom: '1px solid #e5e7eb',\n              fontWeight: '600',\n              fontSize: '1.125rem',\n              color: '#111827'\n            },\n            children: \"Field Configuration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FieldConfigPanel, {\n            field: selectedField,\n            onFieldUpdate: handleFieldUpdate,\n            availableFields: fields.filter(f => f.id !== selectedField.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n};\n_s(FormBuilderPage, \"Vc6M1rW4SLQf/mnHO7b0JnfJmhc=\", false, function () {\n  return [useApi, useFormState];\n});\n_c = FormBuilderPage;\nexport default FormBuilderPage;\nvar _c;\n$RefreshReg$(_c, \"FormBuilderPage\");","map":{"version":3,"names":["React","useState","useRef","useApi","useFormState","FieldPalette","FormCanvas","FieldConfigPanel","DndProvider","HTML5Backend","jsxDEV","_jsxDEV","FormBuilderPage","_s","configSectionRef","fields","setFields","selectedField","setSelectedField","isPreview","setIsPreview","loading","error","post","formValues","handleInputChange","title","description","formErrors","setFormErrors","handleAddField","fieldType","console","log","newField","id","Date","now","toString","type","question","isRequired","options","value","label","columns","name","minLength","maxLength","prevFields","handleFieldSelection","field","current","scrollIntoView","behavior","handleFieldUpdate","updatedField","Array","isArray","map","handleFieldDelete","fieldId","filter","handleSaveForm","validationErrors","validateFormBeforeSave","Object","keys","length","alert","formData","result","err","errors","forEach","index","conditions","condition","condIndex","action","targetId","validation","pattern","customRule","togglePreview","handleFieldDrop","newFields","undefined","splice","push","handleReorderField","dragIndex","hoverIndex","draggedField","scrollToConfig","backend","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","cursor","textDecoration","color","marginTop","display","gap","margin","onChange","placeholder","flex","disabled","minHeight","width","onFieldSelect","onDragDrop","onFieldUpdate","onFieldDelete","onDrop","onReorder","formId","backgroundColor","border","borderRadius","boxShadow","ref","paddingBottom","marginBottom","borderBottom","fontWeight","fontSize","availableFields","f","_c","$RefreshReg$"],"sources":["/Users/judyyip/Downloads/Website/Marketing Campaign/frontend/src/components/builder/FormBuilderPage.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { useApi } from '../../hooks/useApi';\nimport { useFormState } from '../../hooks/useFormState';\nimport FieldPalette from './FieldPalette';\nimport FormCanvas from './FormCanvas';\nimport FieldConfigPanel from './FieldConfigPanel';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nconst FormBuilderPage = () => {\n  // Add a ref for the field configuration section\n  const configSectionRef = useRef(null);\n  \n  const [fields, setFields] = useState([]);\n  const [selectedField, setSelectedField] = useState(null);\n  const [isPreview, setIsPreview] = useState(false);\n  const { loading, error, post } = useApi();\n  const { formValues, handleInputChange } = useFormState({\n    title: 'Untitled Form',\n    description: '',\n  });\n\n  // Add form errors state\n  const [formErrors, setFormErrors] = useState({});\n\n  const handleAddField = (fieldType) => {\n    console.log(\"Adding field of type:\", fieldType);\n    \n    // Create a new field based on type\n    const newField = {\n      id: Date.now().toString(),\n      type: fieldType,\n      question: `New ${fieldType} question`,\n      isRequired: false,\n    };\n    \n    // Add type-specific properties\n    if (fieldType === 'dropdown') {\n      newField.options = [\n        { value: 'Option 1', label: 'Option 1' },\n        { value: 'Option 2', label: 'Option 2' }\n      ];\n    } else if (fieldType === 'table') {\n      newField.columns = [\n        { name: 'Column 1', type: 'text' },\n        { name: 'Column 2', type: 'text' }\n      ];\n    } else if (fieldType === 'text') {\n      newField.minLength = 0;\n      newField.maxLength = 100;\n    }\n    \n    // Add field to state\n    setFields(prevFields => [...prevFields, newField]);\n    setSelectedField(newField);\n    \n    console.log(\"Field added:\", newField);\n  };\n\n  const handleFieldSelection = (field) => {\n    console.log(\"Selected field:\", field);\n    setSelectedField(field);\n    \n    // Scroll to the config section when a field is selected\n    if (configSectionRef.current) {\n      configSectionRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const handleFieldUpdate = (updatedField) => {\n    console.log(\"Updating field:\", updatedField);\n    \n    // Check if we're updating a single field or the entire fields array\n    if (Array.isArray(updatedField)) {\n      setFields(updatedField);\n    } else {\n      setFields(prevFields => \n        prevFields.map(field => \n          field.id === updatedField.id ? updatedField : field\n        )\n      );\n      \n      // Update selected field if it's the one being edited\n      if (selectedField && selectedField.id === updatedField.id) {\n        setSelectedField(updatedField);\n      }\n    }\n  };\n\n  const handleFieldDelete = (fieldId) => {\n    console.log(\"Deleting field:\", fieldId);\n    \n    setFields(prevFields => prevFields.filter(field => field.id !== fieldId));\n    \n    // Clear selection if the deleted field was selected\n    if (selectedField && selectedField.id === fieldId) {\n      setSelectedField(null);\n    }\n  };\n\n  const handleSaveForm = async () => {\n    try {\n      // Validate the form before saving\n      const validationErrors = validateFormBeforeSave(fields);\n      \n      if (Object.keys(validationErrors).length > 0) {\n        // Show validation errors\n        setFormErrors(validationErrors);\n        alert(\"Please fix the validation issues before saving the form.\");\n        return;\n      }\n      \n      const formData = {\n        ...formValues,\n        fields,\n      };\n      \n      console.log(\"Saving form:\", formData);\n      \n      const result = await post('/forms', formData);\n      alert('Form saved successfully!');\n      return result;\n    } catch (err) {\n      console.error('Error saving form:', err);\n    }\n  };\n\n  // Function to validate form before saving\n  const validateFormBeforeSave = (fields) => {\n    const errors = {};\n    \n    // Check title and description\n    if (!formValues.title) {\n      errors.title = \"Form title is required\";\n    }\n    \n    // Check that form has at least one field\n    if (fields.length === 0) {\n      errors.fields = \"Form must have at least one field\";\n    }\n    \n    // Validate each field configuration\n    fields.forEach((field, index) => {\n      // Check that field has a question\n      if (!field.question) {\n        errors[`field_${field.id}`] = `Field ${index + 1} must have a question`;\n      }\n      \n      // Specific validations for different field types\n      if (field.type === 'dropdown' && (!field.options || field.options.length === 0)) {\n        errors[`field_${field.id}_options`] = `Dropdown field ${index + 1} must have at least one option`;\n      }\n      \n      // Validate conditional logic\n      if (field.conditions && field.conditions.length > 0) {\n        field.conditions.forEach((condition, condIndex) => {\n          if (condition.action && !condition.targetId) {\n            errors[`field_${field.id}_condition_${condIndex}`] = \n              `Condition ${condIndex + 1} for field ${index + 1} needs a target question`;\n          }\n        });\n      }\n      \n      // Validate field validation rules\n      if (field.validation) {\n        if (field.validation.pattern === 'custom' && !field.validation.customRule) {\n          errors[`field_${field.id}_validation`] = \n            `Custom validation for field ${index + 1} requires a regex pattern`;\n        }\n      }\n    });\n    \n    return errors;\n  };\n\n  const togglePreview = () => {\n    console.log(\"Toggling preview mode. Current state:\", isPreview);\n    setIsPreview(!isPreview);\n  };\n\n  // Handle dropping field from palette to canvas\n  const handleFieldDrop = (fieldType, index) => {\n    console.log(`Dropped ${fieldType} at index ${index}`);\n    \n    // Create new field with the given type\n    const newField = {\n      id: Date.now().toString(),\n      type: fieldType,\n      question: `New ${fieldType} question`,\n      isRequired: false,\n    };\n    \n    // Add type-specific properties\n    if (fieldType === 'dropdown') {\n      newField.options = [\n        { value: 'Option 1', label: 'Option 1' },\n        { value: 'Option 2', label: 'Option 2' }\n      ];\n    } else if (fieldType === 'table') {\n      newField.columns = [\n        { name: 'Column 1', type: 'text' },\n        { name: 'Column 2', type: 'text' }\n      ];\n    } else if (fieldType === 'text') {\n      newField.minLength = 0;\n      newField.maxLength = 100;\n    }\n    \n    // Insert the field at the specified index\n    const newFields = [...fields];\n    if (index !== undefined && index >= 0) {\n      newFields.splice(index, 0, newField);\n    } else {\n      newFields.push(newField);\n    }\n    \n    setFields(newFields);\n    setSelectedField(newField);\n  };\n\n  // Handle reordering fields\n  const handleReorderField = (dragIndex, hoverIndex) => {\n    const draggedField = fields[dragIndex];\n    \n    // Create a new array without mutating the original\n    const newFields = [...fields];\n    newFields.splice(dragIndex, 1); // Remove from old position\n    newFields.splice(hoverIndex, 0, draggedField); // Insert at new position\n    \n    setFields(newFields);\n  };\n\n  // Function to scroll to configuration section\n  const scrollToConfig = () => {\n    if (configSectionRef.current) {\n      configSectionRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"container\">\n        <header className=\"padding-responsive\">\n          <h1>{isPreview ? 'Form Preview' : 'Form Builder'}</h1>\n          \n          {!isPreview && selectedField && (\n            <div \n              onClick={scrollToConfig} \n              style={{\n                cursor: 'pointer',\n                textDecoration: 'underline',\n                color: '#2563eb',\n                marginTop: '0.5rem',\n                display: 'inline-block'\n              }}\n            >\n              Jump to Field Configuration →\n            </div>\n          )}\n          \n          <div style={{ display: 'flex', gap: '1rem', margin: '1rem 0' }}>\n            <input\n              type=\"text\"\n              name=\"title\"\n              value={formValues.title}\n              onChange={handleInputChange}\n              className={`input ${formErrors.title ? 'border-red-500' : ''}`}\n              placeholder=\"Form Title\"\n              style={{ flex: 1 }}\n            />\n            <button \n              className=\"btn btn-secondary\"\n              onClick={togglePreview}\n            >\n              {isPreview ? 'Edit Form' : 'Preview Form'}\n            </button>\n            <button \n              className=\"btn btn-primary\"\n              onClick={handleSaveForm}\n              disabled={loading}\n            >\n              {loading ? 'Saving...' : 'Save Form'}\n            </button>\n          </div>\n          {formErrors.title && <div className=\"text-red-500 text-sm\">{formErrors.title}</div>}\n          {formErrors.fields && <div className=\"text-red-500 text-sm\">{formErrors.fields}</div>}\n          {error && <div className=\"form-error\">{error}</div>}\n        </header>\n        \n        <main style={{ display: 'flex', gap: '1rem', minHeight: '500px' }}>\n          {!isPreview && (\n            <aside className=\"padding-responsive\" style={{ width: '250px' }}>\n              <FieldPalette onFieldSelect={handleAddField} onDragDrop={handleFieldDrop} />\n            </aside>\n          )}\n          \n          <section className=\"padding-responsive\" style={{ flex: 1 }}>\n            <FormCanvas\n              fields={fields}\n              isPreview={isPreview}\n              onFieldSelect={handleFieldSelection}\n              onFieldUpdate={handleFieldUpdate}\n              onFieldDelete={handleFieldDelete}\n              onDrop={handleFieldDrop}\n              onReorder={handleReorderField}\n              formId=\"preview\"\n            />\n          </section>\n          \n          {!isPreview && selectedField && (\n            <aside \n              className=\"padding-responsive\" \n              style={{ \n                width: '300px',\n                backgroundColor: '#ffffff',\n                border: '1px solid #e5e7eb',\n                borderRadius: '0.5rem',\n                boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'\n              }}\n              ref={configSectionRef}\n              id=\"field-configuration\"\n            >\n              <h2 style={{ \n                paddingBottom: '0.5rem',\n                marginBottom: '0.5rem',\n                borderBottom: '1px solid #e5e7eb',\n                fontWeight: '600',\n                fontSize: '1.125rem',\n                color: '#111827'\n              }}>\n                Field Configuration\n              </h2>\n              <FieldConfigPanel \n                field={selectedField} \n                onFieldUpdate={handleFieldUpdate}\n                availableFields={fields.filter(f => f.id !== selectedField.id)}\n              />\n            </aside>\n          )}\n        </main>\n      </div>\n    </DndProvider>\n  );\n};\n\nexport default FormBuilderPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}