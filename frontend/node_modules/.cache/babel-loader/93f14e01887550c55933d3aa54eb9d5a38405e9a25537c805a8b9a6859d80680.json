{"ast":null,"code":"var _jsxFileName = \"/Users/judyyip/Downloads/Website/Marketing Campaign/frontend/src/components/builder/FormValidationModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { verifyValidationRules } from '../../utils/formValidation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormValidationModal = ({\n  isOpen,\n  onClose,\n  fields,\n  onSave,\n  onUpdateField\n}) => {\n  _s();\n  const [selectedFieldId, setSelectedFieldId] = useState(null);\n  const [validationErrors, setValidationErrors] = useState({});\n  useEffect(() => {\n    if (isOpen && fields.length > 0) {\n      // Check for fields with validation and select the first one\n      const fieldWithValidation = fields.find(f => f.validation);\n      if (fieldWithValidation) {\n        setSelectedFieldId(fieldWithValidation.id);\n      } else {\n        setSelectedFieldId(fields[0].id);\n      }\n\n      // Check for validation errors\n      setValidationErrors(verifyValidationRules(fields));\n    }\n  }, [isOpen, fields]);\n  if (!isOpen) return null;\n  const selectedField = fields.find(f => f.id === selectedFieldId) || fields[0];\n  const handleValidationChange = validation => {\n    if (!selectedField) return;\n    const updatedField = {\n      ...selectedField,\n      validation\n    };\n    onUpdateField(updatedField);\n\n    // Recheck validation errors\n    setValidationErrors(verifyValidationRules([...fields.filter(f => f.id !== selectedField.id), updatedField]));\n  };\n  const addValidationRule = fieldId => {\n    const field = fields.find(f => f.id === fieldId);\n    if (!field) return;\n    const currentValidation = field.validation || {};\n    const updatedField = {\n      ...field,\n      validation: {\n        ...currentValidation,\n        required: currentValidation.required || field.isRequired || false,\n        pattern: currentValidation.pattern || '',\n        customRule: currentValidation.customRule || '',\n        errorMessage: currentValidation.errorMessage || 'Invalid input'\n      }\n    };\n    onUpdateField(updatedField);\n  };\n  const removeValidation = fieldId => {\n    const field = fields.find(f => f.id === fieldId);\n    if (!field) return;\n    const updatedField = {\n      ...field,\n      validation: null\n    };\n    onUpdateField(updatedField);\n  };\n  const hasValidationErrors = Object.keys(validationErrors).length > 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-auto p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold\",\n          children: \"Form Validation Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"text-gray-500 hover:text-gray-700\",\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-4 gap-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-span-1 border-r pr-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-medium mb-2\",\n            children: \"Fields\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"space-y-2\",\n            children: fields.map(field => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `w-full text-left py-2 px-3 rounded text-sm ${selectedFieldId === field.id ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'} ${field.validation ? 'font-medium' : ''}`,\n                onClick: () => setSelectedFieldId(field.id),\n                children: [field.question || `Field (${field.id.slice(0, 5)}...)`, validationErrors[`field_${field.id}_validation`] && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"ml-2 text-red-500 text-xs\",\n                  children: \"\\u26A0\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, this)\n            }, field.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-span-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-50 p-4 rounded-lg mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-medium mb-2\",\n              children: selectedField.question || `Field (${selectedField.id})`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-600 mb-2\",\n              children: [\"Type: \", selectedField.type.charAt(0).toUpperCase() + selectedField.type.slice(1)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), validationErrors[`field_${selectedField.id}_validation`] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-red-500 mb-4 p-2 bg-red-50 rounded-md\",\n              children: validationErrors[`field_${selectedField.id}_validation`]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this), selectedField.validation ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"space-y-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"grid grid-cols-2 gap-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"block text-sm font-medium mb-1\",\n                    children: \"Validation Pattern\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    className: \"w-full p-2 border rounded\",\n                    value: selectedField.validation.pattern || '',\n                    onChange: e => handleValidationChange({\n                      ...selectedField.validation,\n                      pattern: e.target.value\n                    }),\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"None\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 153,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"email\",\n                      children: \"Email\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"phone\",\n                      children: \"Phone Number\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 155,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"number\",\n                      children: \"Numbers Only\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 156,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"custom\",\n                      children: \"Custom Regex\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 157,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 145,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    className: \"block text-sm font-medium mb-1\",\n                    children: \"Required\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 162,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex items-center mt-2\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"checkbox\",\n                      id: `required-${selectedField.id}`,\n                      checked: selectedField.validation.required || false,\n                      onChange: e => handleValidationChange({\n                        ...selectedField.validation,\n                        required: e.target.checked\n                      }),\n                      className: \"mr-2\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 164,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      htmlFor: `required-${selectedField.id}`,\n                      children: \"Field is required\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 174,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this), selectedField.validation.pattern === 'custom' && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-sm font-medium mb-1\",\n                  children: \"Custom Regex Pattern\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  className: \"w-full p-2 border rounded\",\n                  placeholder: \"e.g. ^[0-9]{4}$\",\n                  value: selectedField.validation.customRule || '',\n                  onChange: e => handleValidationChange({\n                    ...selectedField.validation,\n                    customRule: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-xs text-gray-500 mt-1\",\n                  children: [\"Example: ^[0-9]\", 4, \"$ validates a 4-digit number\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-sm font-medium mb-1\",\n                  children: \"Test Value\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex gap-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    className: \"flex-1 p-2 border rounded\",\n                    placeholder: \"e.g. 1234\",\n                    value: selectedField.validation.testValue || '',\n                    onChange: e => handleValidationChange({\n                      ...selectedField.validation,\n                      testValue: e.target.value\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"bg-blue-50 text-blue-700 px-3 py-2 rounded\",\n                    onClick: () => {\n                      // Test validation with current test value\n                      const {\n                        pattern,\n                        customRule,\n                        testValue\n                      } = selectedField.validation;\n                      if (!testValue) {\n                        alert(\"Please enter a test value first\");\n                        return;\n                      }\n                      let isValid = true;\n                      let regexPattern = null;\n                      if (pattern === 'email') {\n                        regexPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                      } else if (pattern === 'phone') {\n                        regexPattern = /^\\d{10}$/;\n                      } else if (pattern === 'number') {\n                        regexPattern = /^\\d+$/;\n                      } else if (pattern === 'custom' && customRule) {\n                        try {\n                          regexPattern = new RegExp(customRule);\n                        } catch (error) {\n                          alert(`Invalid regex pattern: ${error.message}`);\n                          return;\n                        }\n                      }\n                      if (regexPattern) {\n                        isValid = regexPattern.test(testValue);\n                      }\n                      alert(isValid ? `Validation passed for value: ${testValue}` : `Validation failed for value: ${testValue}`);\n                    },\n                    children: \"Test\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 211,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-sm font-medium mb-1\",\n                  children: \"Error Message\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  className: \"w-full p-2 border rounded\",\n                  placeholder: \"Please enter a valid value\",\n                  value: selectedField.validation.errorMessage || '',\n                  onChange: e => handleValidationChange({\n                    ...selectedField.validation,\n                    errorMessage: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pt-2\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"bg-red-100 text-red-700 px-3 py-2 rounded\",\n                  onClick: () => removeValidation(selectedField.id),\n                  children: \"Remove Validation\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"py-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-sm text-gray-500 mb-3\",\n                children: \"No validation rules defined for this field.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"bg-blue-100 text-blue-700 px-3 py-2 rounded\",\n                onClick: () => addValidationRule(selectedField.id),\n                children: \"Add Validation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-6 flex justify-end space-x-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"px-4 py-2 border border-gray-300 rounded text-gray-700 hover:bg-gray-50\",\n          onClick: onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50\",\n          onClick: () => {\n            if (hasValidationErrors) {\n              alert(\"Please fix validation errors before saving\");\n              return;\n            }\n            onSave();\n          },\n          disabled: hasValidationErrors,\n          children: \"Save Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(FormValidationModal, \"RdyH4Owhxz1+G0CeyEq9x3RqHv0=\");\n_c = FormValidationModal;\nexport default FormValidationModal;\nvar _c;\n$RefreshReg$(_c, \"FormValidationModal\");","map":{"version":3,"names":["React","useState","useEffect","verifyValidationRules","jsxDEV","_jsxDEV","FormValidationModal","isOpen","onClose","fields","onSave","onUpdateField","_s","selectedFieldId","setSelectedFieldId","validationErrors","setValidationErrors","length","fieldWithValidation","find","f","validation","id","selectedField","handleValidationChange","updatedField","filter","addValidationRule","fieldId","field","currentValidation","required","isRequired","pattern","customRule","errorMessage","removeValidation","hasValidationErrors","Object","keys","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","question","slice","type","charAt","toUpperCase","value","onChange","e","target","checked","htmlFor","placeholder","testValue","alert","isValid","regexPattern","RegExp","error","message","test","disabled","_c","$RefreshReg$"],"sources":["/Users/judyyip/Downloads/Website/Marketing Campaign/frontend/src/components/builder/FormValidationModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { verifyValidationRules } from '../../utils/formValidation';\n\nconst FormValidationModal = ({ \n  isOpen, \n  onClose, \n  fields, \n  onSave, \n  onUpdateField \n}) => {\n  const [selectedFieldId, setSelectedFieldId] = useState(null);\n  const [validationErrors, setValidationErrors] = useState({});\n  \n  useEffect(() => {\n    if (isOpen && fields.length > 0) {\n      // Check for fields with validation and select the first one\n      const fieldWithValidation = fields.find(f => f.validation);\n      if (fieldWithValidation) {\n        setSelectedFieldId(fieldWithValidation.id);\n      } else {\n        setSelectedFieldId(fields[0].id);\n      }\n      \n      // Check for validation errors\n      setValidationErrors(verifyValidationRules(fields));\n    }\n  }, [isOpen, fields]);\n  \n  if (!isOpen) return null;\n  \n  const selectedField = fields.find(f => f.id === selectedFieldId) || fields[0];\n  \n  const handleValidationChange = (validation) => {\n    if (!selectedField) return;\n    \n    const updatedField = {\n      ...selectedField,\n      validation\n    };\n    \n    onUpdateField(updatedField);\n    \n    // Recheck validation errors\n    setValidationErrors(verifyValidationRules([\n      ...fields.filter(f => f.id !== selectedField.id),\n      updatedField\n    ]));\n  };\n  \n  const addValidationRule = (fieldId) => {\n    const field = fields.find(f => f.id === fieldId);\n    if (!field) return;\n    \n    const currentValidation = field.validation || {};\n    \n    const updatedField = {\n      ...field,\n      validation: {\n        ...currentValidation,\n        required: currentValidation.required || field.isRequired || false,\n        pattern: currentValidation.pattern || '',\n        customRule: currentValidation.customRule || '',\n        errorMessage: currentValidation.errorMessage || 'Invalid input'\n      }\n    };\n    \n    onUpdateField(updatedField);\n  };\n  \n  const removeValidation = (fieldId) => {\n    const field = fields.find(f => f.id === fieldId);\n    if (!field) return;\n    \n    const updatedField = {\n      ...field,\n      validation: null\n    };\n    \n    onUpdateField(updatedField);\n  };\n  \n  const hasValidationErrors = Object.keys(validationErrors).length > 0;\n  \n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-auto p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-xl font-semibold\">Form Validation Settings</h2>\n          <button \n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            ✕\n          </button>\n        </div>\n        \n        <div className=\"grid grid-cols-4 gap-6\">\n          {/* Field selector sidebar */}\n          <div className=\"col-span-1 border-r pr-4\">\n            <h3 className=\"font-medium mb-2\">Fields</h3>\n            <ul className=\"space-y-2\">\n              {fields.map(field => (\n                <li key={field.id}>\n                  <button\n                    className={`w-full text-left py-2 px-3 rounded text-sm ${\n                      selectedFieldId === field.id \n                        ? 'bg-blue-100 text-blue-700' \n                        : 'hover:bg-gray-100'\n                    } ${\n                      field.validation ? 'font-medium' : ''\n                    }`}\n                    onClick={() => setSelectedFieldId(field.id)}\n                  >\n                    {field.question || `Field (${field.id.slice(0, 5)}...)`}\n                    {validationErrors[`field_${field.id}_validation`] && (\n                      <span className=\"ml-2 text-red-500 text-xs\">⚠️</span>\n                    )}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n          \n          {/* Validation configuration */}\n          <div className=\"col-span-3\">\n            <div className=\"bg-gray-50 p-4 rounded-lg mb-4\">\n              <h3 className=\"font-medium mb-2\">\n                {selectedField.question || `Field (${selectedField.id})`}\n              </h3>\n              <p className=\"text-sm text-gray-600 mb-2\">\n                Type: {selectedField.type.charAt(0).toUpperCase() + selectedField.type.slice(1)}\n              </p>\n              \n              {validationErrors[`field_${selectedField.id}_validation`] && (\n                <div className=\"text-sm text-red-500 mb-4 p-2 bg-red-50 rounded-md\">\n                  {validationErrors[`field_${selectedField.id}_validation`]}\n                </div>\n              )}\n              \n              {selectedField.validation ? (\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Validation Pattern</label>\n                      <select\n                        className=\"w-full p-2 border rounded\"\n                        value={selectedField.validation.pattern || ''}\n                        onChange={(e) => handleValidationChange({\n                          ...selectedField.validation,\n                          pattern: e.target.value\n                        })}\n                      >\n                        <option value=\"\">None</option>\n                        <option value=\"email\">Email</option>\n                        <option value=\"phone\">Phone Number</option>\n                        <option value=\"number\">Numbers Only</option>\n                        <option value=\"custom\">Custom Regex</option>\n                      </select>\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Required</label>\n                      <div className=\"flex items-center mt-2\">\n                        <input\n                          type=\"checkbox\"\n                          id={`required-${selectedField.id}`}\n                          checked={selectedField.validation.required || false}\n                          onChange={(e) => handleValidationChange({\n                            ...selectedField.validation,\n                            required: e.target.checked\n                          })}\n                          className=\"mr-2\"\n                        />\n                        <label htmlFor={`required-${selectedField.id}`}>Field is required</label>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {selectedField.validation.pattern === 'custom' && (\n                    <div>\n                      <label className=\"block text-sm font-medium mb-1\">Custom Regex Pattern</label>\n                      <input\n                        type=\"text\"\n                        className=\"w-full p-2 border rounded\"\n                        placeholder=\"e.g. ^[0-9]{4}$\"\n                        value={selectedField.validation.customRule || ''}\n                        onChange={(e) => handleValidationChange({\n                          ...selectedField.validation,\n                          customRule: e.target.value\n                        })}\n                      />\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        Example: ^[0-9]{4}$ validates a 4-digit number\n                      </p>\n                    </div>\n                  )}\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Test Value</label>\n                    <div className=\"flex gap-2\">\n                      <input\n                        type=\"text\"\n                        className=\"flex-1 p-2 border rounded\"\n                        placeholder=\"e.g. 1234\"\n                        value={selectedField.validation.testValue || ''}\n                        onChange={(e) => handleValidationChange({\n                          ...selectedField.validation,\n                          testValue: e.target.value\n                        })}\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"bg-blue-50 text-blue-700 px-3 py-2 rounded\"\n                        onClick={() => {\n                          // Test validation with current test value\n                          const { pattern, customRule, testValue } = selectedField.validation;\n                          if (!testValue) {\n                            alert(\"Please enter a test value first\");\n                            return;\n                          }\n                          \n                          let isValid = true;\n                          let regexPattern = null;\n                          \n                          if (pattern === 'email') {\n                            regexPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                          } else if (pattern === 'phone') {\n                            regexPattern = /^\\d{10}$/;\n                          } else if (pattern === 'number') {\n                            regexPattern = /^\\d+$/;\n                          } else if (pattern === 'custom' && customRule) {\n                            try {\n                              regexPattern = new RegExp(customRule);\n                            } catch (error) {\n                              alert(`Invalid regex pattern: ${error.message}`);\n                              return;\n                            }\n                          }\n                          \n                          if (regexPattern) {\n                            isValid = regexPattern.test(testValue);\n                          }\n                          \n                          alert(isValid \n                            ? `Validation passed for value: ${testValue}` \n                            : `Validation failed for value: ${testValue}`);\n                        }}\n                      >\n                        Test\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Error Message</label>\n                    <input\n                      type=\"text\"\n                      className=\"w-full p-2 border rounded\"\n                      placeholder=\"Please enter a valid value\"\n                      value={selectedField.validation.errorMessage || ''}\n                      onChange={(e) => handleValidationChange({\n                        ...selectedField.validation,\n                        errorMessage: e.target.value\n                      })}\n                    />\n                  </div>\n                  \n                  <div className=\"pt-2\">\n                    <button\n                      type=\"button\"\n                      className=\"bg-red-100 text-red-700 px-3 py-2 rounded\"\n                      onClick={() => removeValidation(selectedField.id)}\n                    >\n                      Remove Validation\n                    </button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"py-4\">\n                  <p className=\"text-sm text-gray-500 mb-3\">No validation rules defined for this field.</p>\n                  <button\n                    type=\"button\"\n                    className=\"bg-blue-100 text-blue-700 px-3 py-2 rounded\"\n                    onClick={() => addValidationRule(selectedField.id)}\n                  >\n                    Add Validation\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mt-6 flex justify-end space-x-3\">\n          <button\n            className=\"px-4 py-2 border border-gray-300 rounded text-gray-700 hover:bg-gray-50\"\n            onClick={onClose}\n          >\n            Cancel\n          </button>\n          <button\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50\"\n            onClick={() => {\n              if (hasValidationErrors) {\n                alert(\"Please fix validation errors before saving\");\n                return;\n              }\n              onSave();\n            }}\n            disabled={hasValidationErrors}\n          >\n            Save Form\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormValidationModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}