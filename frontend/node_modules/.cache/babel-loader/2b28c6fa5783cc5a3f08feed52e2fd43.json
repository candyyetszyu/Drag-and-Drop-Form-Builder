{"ast":null,"code":"import React,{useState}from'react';const FieldConfigPanel=_ref=>{var _field$options,_field$columns,_field$columns2;let{field,onFieldUpdate}=_ref;if(!field)return null;const handleChange=e=>{const{name,value,type,checked}=e.target;onFieldUpdate({...field,[name]:type==='checkbox'?checked:value});};// Functions to handle column operations\nconst handleAddColumn=()=>{const newColumns=[...(field.columns||[])];newColumns.push({name:`Column ${newColumns.length+1}`,type:'text'});onFieldUpdate({...field,columns:newColumns});};const handleUpdateColumn=(index,updates)=>{const updatedColumns=[...field.columns];updatedColumns[index]={...updatedColumns[index],...updates};onFieldUpdate({...field,columns:updatedColumns});};const handleRemoveColumn=index=>{onFieldUpdate({...field,columns:field.columns.filter((_,i)=>i!==index)});};// Handle adding test row for the table\nconst handleAddTestRow=()=>{if(!field.columns||field.columns.length===0)return;// Create an empty row based on current columns\nconst newRow=field.columns.reduce((acc,col)=>{acc[col.name]='';return acc;},{});// Add the row to the value array directly (instead of testData)\nconst updatedValue=[...(field.value||[]),newRow];onFieldUpdate({...field,value:updatedValue});};// Handle removing a test row\nconst handleRemoveTestRow=index=>{onFieldUpdate({...field,value:(field.value||[]).filter((_,i)=>i!==index)});};// Update test row cell value\nconst handleTestCellChange=(rowIndex,colName,value)=>{const updatedValue=[...(field.value||[])];updatedValue[rowIndex]={...updatedValue[rowIndex],[colName]:value};onFieldUpdate({...field,value:updatedValue});};// Handle dropdown options for a column\nconst handleAddOption=()=>{const newOptions=[...(field.options||[])];newOptions.push({value:`Option ${newOptions.length+1}`,label:`Option ${newOptions.length+1}`});onFieldUpdate({...field,options:newOptions});};const handleUpdateOption=(index,value)=>{const updatedOptions=[...field.options];updatedOptions[index]={...updatedOptions[index],value:value,label:value};onFieldUpdate({...field,options:updatedOptions});};const handleRemoveOption=index=>{onFieldUpdate({...field,options:field.options.filter((_,i)=>i!==index)});};return/*#__PURE__*/React.createElement(\"div\",{className:\"field-config-panel\"},/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',flexDirection:'column',gap:'1.25rem'}},/*#__PURE__*/React.createElement(\"div\",{style:{backgroundColor:'#f0f9ff',border:'1px solid #bae6fd',borderRadius:'0.375rem',padding:'0.75rem',marginBottom:'1rem'}},/*#__PURE__*/React.createElement(\"div\",{style:{fontSize:'0.875rem',color:'#0369a1',fontWeight:'bold',marginBottom:'0.25rem'}},field.type.charAt(0).toUpperCase()+field.type.slice(1),\" Field\"),/*#__PURE__*/React.createElement(\"div\",{style:{fontSize:'0.9375rem',fontWeight:'500'}},field.question||'Untitled Question')),/*#__PURE__*/React.createElement(\"div\",{className:\"config-field\"},/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\"},\"Question Text\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"question\",value:field.question||'',onChange:handleChange,className:\"input\",placeholder:\"Enter question text\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"config-field\"},/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',alignItems:'center',gap:'0.75rem'}},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",id:\"isRequired\",name:\"isRequired\",checked:field.isRequired||false,onChange:handleChange,style:{width:'auto'}}),/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"isRequired\",className:\"form-label\",style:{margin:0,cursor:'pointer'}},\"Required Field\"))),field.type==='text'&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"config-field\"},/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\"},\"Minimum Length\"),/*#__PURE__*/React.createElement(\"input\",{type:\"number\",name:\"minLength\",value:field.minLength||'',onChange:handleChange,className:\"input\",placeholder:\"0\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"config-field\"},/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\"},\"Maximum Length\"),/*#__PURE__*/React.createElement(\"input\",{type:\"number\",name:\"maxLength\",value:field.maxLength||'',onChange:handleChange,className:\"input\",placeholder:\"100\"}))),field.type==='dropdown'&&/*#__PURE__*/React.createElement(\"div\",{className:\"config-field\"},/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\"},\"Options\"),/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',flexDirection:'column',gap:'0.5rem',marginTop:'0.5rem'}},(_field$options=field.options)===null||_field$options===void 0?void 0:_field$options.map((option,index)=>/*#__PURE__*/React.createElement(\"div\",{key:index,style:{display:'flex',gap:'0.5rem'}},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",value:option.value||'',onChange:e=>handleUpdateOption(index,e.target.value),className:\"input\",placeholder:`Option ${index+1}`}),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"btn btn-secondary\",style:{backgroundColor:'#f87171',color:'white',padding:'0.25rem 0.5rem',minWidth:'40px'},onClick:()=>handleRemoveOption(index)},\"\\u2715\"))),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"btn btn-secondary\",style:{marginTop:'0.5rem'},onClick:handleAddOption},\"Add Option\"))),field.type==='table'&&/*#__PURE__*/React.createElement(\"div\",{className:\"config-field\"},/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\"},\"Table Configuration\"),/*#__PURE__*/React.createElement(\"div\",{style:{marginBottom:'1.5rem'}},/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\"},\"Columns\"),(_field$columns=field.columns)===null||_field$columns===void 0?void 0:_field$columns.map((column,index)=>/*#__PURE__*/React.createElement(\"div\",{key:index,className:\"card\",style:{padding:'0.75rem',marginBottom:'0.75rem'}},/*#__PURE__*/React.createElement(\"div\",{style:{display:'flex',justifyContent:'space-between',marginBottom:'0.5rem'}},/*#__PURE__*/React.createElement(\"div\",{style:{fontWeight:'500'}},\"Column \",index+1),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"btn btn-secondary\",style:{backgroundColor:'#f87171',color:'white',padding:'0.125rem 0.375rem',fontSize:'0.75rem'},onClick:()=>handleRemoveColumn(index)},\"Remove\")),/*#__PURE__*/React.createElement(\"div\",{style:{marginBottom:'0.5rem'}},/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\"},\"Column Name\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",value:column.name||'',onChange:e=>handleUpdateColumn(index,{name:e.target.value}),className:\"input\",style:{height:'2rem'}})),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\"},\"Column Type\"),/*#__PURE__*/React.createElement(\"select\",{value:column.type||'text',onChange:e=>handleUpdateColumn(index,{type:e.target.value}),className:\"input\",style:{height:'2rem'}},/*#__PURE__*/React.createElement(\"option\",{value:\"text\"},\"Text\"),/*#__PURE__*/React.createElement(\"option\",{value:\"dropdown\"},\"Dropdown\"))))),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"btn btn-primary\",onClick:handleAddColumn},\"Add Column\")),((_field$columns2=field.columns)===null||_field$columns2===void 0?void 0:_field$columns2.length)>0&&/*#__PURE__*/React.createElement(\"div\",{style:{marginTop:'1.5rem'}},/*#__PURE__*/React.createElement(\"label\",{className:\"form-label\",style:{marginBottom:'0.5rem'}},\"Sample Rows\",/*#__PURE__*/React.createElement(\"span\",{style:{fontWeight:'normal',fontStyle:'italic',marginLeft:'0.5rem',fontSize:'0.75rem',color:'#6b7280'}},\"(Will appear in the form)\")),field.value&&field.value.length>0?/*#__PURE__*/React.createElement(\"div\",{style:{marginBottom:'1rem',overflowX:'auto'}},/*#__PURE__*/React.createElement(\"table\",{style:{width:'100%',borderCollapse:'collapse'}},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,field.columns.map((col,idx)=>/*#__PURE__*/React.createElement(\"th\",{key:idx,style:{padding:'0.375rem',backgroundColor:'#f9fafb',border:'1px solid #e5e7eb',textAlign:'left',fontSize:'0.75rem'}},col.name)),/*#__PURE__*/React.createElement(\"th\",{style:{width:'40px',backgroundColor:'#f9fafb',border:'1px solid #e5e7eb'}}))),/*#__PURE__*/React.createElement(\"tbody\",null,field.value.map((row,rowIdx)=>/*#__PURE__*/React.createElement(\"tr\",{key:rowIdx},field.columns.map((col,colIdx)=>/*#__PURE__*/React.createElement(\"td\",{key:colIdx,style:{padding:'0.25rem',border:'1px solid #e5e7eb'}},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",value:row[col.name]||'',onChange:e=>handleTestCellChange(rowIdx,col.name,e.target.value),className:\"input\",style:{height:'1.75rem',padding:'0.25rem',fontSize:'0.75rem',border:'none',boxShadow:'none'}}))),/*#__PURE__*/React.createElement(\"td\",{style:{padding:'0.25rem',border:'1px solid #e5e7eb',textAlign:'center'}},/*#__PURE__*/React.createElement(\"button\",{type:\"button\",onClick:()=>handleRemoveTestRow(rowIdx),style:{backgroundColor:'#f87171',color:'white',border:'none',borderRadius:'0.25rem',width:'18px',height:'18px',display:'inline-flex',alignItems:'center',justifyContent:'center',fontSize:'0.625rem',padding:0,cursor:'pointer'}},\"\\u2715\"))))))):/*#__PURE__*/React.createElement(\"div\",{style:{padding:'0.5rem',backgroundColor:'#f9fafb',borderRadius:'0.25rem',marginBottom:'0.5rem',fontSize:'0.75rem',color:'#6b7280',textAlign:'center'}},\"No sample rows added yet\"),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"btn btn-secondary\",onClick:handleAddTestRow,style:{marginTop:'0.5rem',fontSize:'0.75rem'}},\"Add Sample Row\")))));};export default FieldConfigPanel;","map":{"version":3,"names":["React","useState","FieldConfigPanel","_ref","_field$options","_field$columns","_field$columns2","field","onFieldUpdate","handleChange","e","name","value","type","checked","target","handleAddColumn","newColumns","columns","push","length","handleUpdateColumn","index","updates","updatedColumns","handleRemoveColumn","filter","_","i","handleAddTestRow","newRow","reduce","acc","col","updatedValue","handleRemoveTestRow","handleTestCellChange","rowIndex","colName","handleAddOption","newOptions","options","label","handleUpdateOption","updatedOptions","handleRemoveOption","createElement","className","style","display","flexDirection","gap","backgroundColor","border","borderRadius","padding","marginBottom","fontSize","color","fontWeight","charAt","toUpperCase","slice","question","onChange","placeholder","alignItems","id","isRequired","width","htmlFor","margin","cursor","Fragment","minLength","maxLength","marginTop","map","option","key","minWidth","onClick","column","justifyContent","height","fontStyle","marginLeft","overflowX","borderCollapse","idx","textAlign","row","rowIdx","colIdx","boxShadow"],"sources":["/Users/judyyip/Downloads/Website/Marketing Campaign/frontend/src/components/builder/FieldConfigPanel.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst FieldConfigPanel = ({ field, onFieldUpdate }) => {\n  if (!field) return null;\n\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    onFieldUpdate({\n      ...field,\n      [name]: type === 'checkbox' ? checked : value,\n    });\n  };\n\n  // Functions to handle column operations\n  const handleAddColumn = () => {\n    const newColumns = [...(field.columns || [])];\n    newColumns.push({ name: `Column ${newColumns.length + 1}`, type: 'text' });\n    \n    onFieldUpdate({\n      ...field,\n      columns: newColumns,\n    });\n  };\n\n  const handleUpdateColumn = (index, updates) => {\n    const updatedColumns = [...field.columns];\n    updatedColumns[index] = { ...updatedColumns[index], ...updates };\n    \n    onFieldUpdate({\n      ...field,\n      columns: updatedColumns,\n    });\n  };\n\n  const handleRemoveColumn = (index) => {\n    onFieldUpdate({\n      ...field,\n      columns: field.columns.filter((_, i) => i !== index),\n    });\n  };\n\n  // Handle adding test row for the table\n  const handleAddTestRow = () => {\n    if (!field.columns || field.columns.length === 0) return;\n    \n    // Create an empty row based on current columns\n    const newRow = field.columns.reduce((acc, col) => {\n      acc[col.name] = '';\n      return acc;\n    }, {});\n    \n    // Add the row to the value array directly (instead of testData)\n    const updatedValue = [...(field.value || []), newRow];\n    \n    onFieldUpdate({\n      ...field,\n      value: updatedValue,\n    });\n  };\n\n  // Handle removing a test row\n  const handleRemoveTestRow = (index) => {\n    onFieldUpdate({\n      ...field,\n      value: (field.value || []).filter((_, i) => i !== index),\n    });\n  };\n\n  // Update test row cell value\n  const handleTestCellChange = (rowIndex, colName, value) => {\n    const updatedValue = [...(field.value || [])];\n    updatedValue[rowIndex] = { \n      ...updatedValue[rowIndex],\n      [colName]: value \n    };\n    \n    onFieldUpdate({\n      ...field,\n      value: updatedValue,\n    });\n  };\n\n  // Handle dropdown options for a column\n  const handleAddOption = () => {\n    const newOptions = [...(field.options || [])];\n    newOptions.push({ value: `Option ${newOptions.length + 1}`, label: `Option ${newOptions.length + 1}` });\n    \n    onFieldUpdate({\n      ...field,\n      options: newOptions,\n    });\n  };\n\n  const handleUpdateOption = (index, value) => {\n    const updatedOptions = [...field.options];\n    updatedOptions[index] = { \n      ...updatedOptions[index], \n      value: value,\n      label: value \n    };\n    \n    onFieldUpdate({\n      ...field,\n      options: updatedOptions,\n    });\n  };\n\n  const handleRemoveOption = (index) => {\n    onFieldUpdate({\n      ...field,\n      options: field.options.filter((_, i) => i !== index),\n    });\n  };\n\n  return (\n    <div className=\"field-config-panel\">\n      <div style={{ \n        display: 'flex', \n        flexDirection: 'column', \n        gap: '1.25rem' \n      }}>\n        {/* Highlight the field type and question */}\n        <div style={{\n          backgroundColor: '#f0f9ff',\n          border: '1px solid #bae6fd',\n          borderRadius: '0.375rem',\n          padding: '0.75rem',\n          marginBottom: '1rem'\n        }}>\n          <div style={{ \n            fontSize: '0.875rem', \n            color: '#0369a1', \n            fontWeight: 'bold', \n            marginBottom: '0.25rem' \n          }}>\n            {field.type.charAt(0).toUpperCase() + field.type.slice(1)} Field\n          </div>\n          <div style={{ fontSize: '0.9375rem', fontWeight: '500' }}>\n            {field.question || 'Untitled Question'}\n          </div>\n        </div>\n        \n        {/* Question text input */}\n        <div className=\"config-field\">\n          <label className=\"form-label\">Question Text</label>\n          <input\n            type=\"text\"\n            name=\"question\"\n            value={field.question || ''}\n            onChange={handleChange}\n            className=\"input\"\n            placeholder=\"Enter question text\"\n          />\n        </div>\n        \n        {/* Required checkbox */}\n        <div className=\"config-field\">\n          <div style={{ \n            display: 'flex', \n            alignItems: 'center', \n            gap: '0.75rem' \n          }}>\n            <input\n              type=\"checkbox\"\n              id=\"isRequired\"\n              name=\"isRequired\"\n              checked={field.isRequired || false}\n              onChange={handleChange}\n              style={{ width: 'auto' }}\n            />\n            <label \n              htmlFor=\"isRequired\" \n              className=\"form-label\" \n              style={{ margin: 0, cursor: 'pointer' }}\n            >\n              Required Field\n            </label>\n          </div>\n        </div>\n        \n        {/* Text field specific settings */}\n        {field.type === 'text' && (\n          <>\n            <div className=\"config-field\">\n              <label className=\"form-label\">Minimum Length</label>\n              <input\n                type=\"number\"\n                name=\"minLength\"\n                value={field.minLength || ''}\n                onChange={handleChange}\n                className=\"input\"\n                placeholder=\"0\"\n              />\n            </div>\n            <div className=\"config-field\">\n              <label className=\"form-label\">Maximum Length</label>\n              <input\n                type=\"number\"\n                name=\"maxLength\"\n                value={field.maxLength || ''}\n                onChange={handleChange}\n                className=\"input\"\n                placeholder=\"100\"\n              />\n            </div>\n          </>\n        )}\n        \n        {/* Dropdown field specific settings */}\n        {field.type === 'dropdown' && (\n          <div className=\"config-field\">\n            <label className=\"form-label\">Options</label>\n            <div style={{ \n              display: 'flex', \n              flexDirection: 'column', \n              gap: '0.5rem', \n              marginTop: '0.5rem' \n            }}>\n              {field.options?.map((option, index) => (\n                <div key={index} style={{ \n                  display: 'flex', \n                  gap: '0.5rem' \n                }}>\n                  <input\n                    type=\"text\"\n                    value={option.value || ''}\n                    onChange={(e) => handleUpdateOption(index, e.target.value)}\n                    className=\"input\"\n                    placeholder={`Option ${index + 1}`}\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    style={{ \n                      backgroundColor: '#f87171', \n                      color: 'white',\n                      padding: '0.25rem 0.5rem',\n                      minWidth: '40px'\n                    }}\n                    onClick={() => handleRemoveOption(index)}\n                  >\n                    ✕\n                  </button>\n                </div>\n              ))}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                style={{ marginTop: '0.5rem' }}\n                onClick={handleAddOption}\n              >\n                Add Option\n              </button>\n            </div>\n          </div>\n        )}\n        \n        {/* Table field specific settings */}\n        {field.type === 'table' && (\n          <div className=\"config-field\">\n            <label className=\"form-label\">Table Configuration</label>\n            \n            {/* Column configuration */}\n            <div style={{ marginBottom: '1.5rem' }}>\n              <label className=\"form-label\">Columns</label>\n              {field.columns?.map((column, index) => (\n                <div key={index} className=\"card\" style={{ padding: '0.75rem', marginBottom: '0.75rem' }}>\n                  <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '0.5rem' }}>\n                    <div style={{ fontWeight: '500' }}>Column {index + 1}</div>\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-secondary\"\n                      style={{ \n                        backgroundColor: '#f87171', \n                        color: 'white',\n                        padding: '0.125rem 0.375rem',\n                        fontSize: '0.75rem'\n                      }}\n                      onClick={() => handleRemoveColumn(index)}\n                    >\n                      Remove\n                    </button>\n                  </div>\n                  \n                  <div style={{ marginBottom: '0.5rem' }}>\n                    <label className=\"form-label\">Column Name</label>\n                    <input\n                      type=\"text\"\n                      value={column.name || ''}\n                      onChange={(e) => handleUpdateColumn(index, { name: e.target.value })}\n                      className=\"input\"\n                      style={{ height: '2rem' }}\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"form-label\">Column Type</label>\n                    <select\n                      value={column.type || 'text'}\n                      onChange={(e) => handleUpdateColumn(index, { type: e.target.value })}\n                      className=\"input\"\n                      style={{ height: '2rem' }}\n                    >\n                      <option value=\"text\">Text</option>\n                      <option value=\"dropdown\">Dropdown</option>\n                    </select>\n                  </div>\n                </div>\n              ))}\n              \n              <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                onClick={handleAddColumn}\n              >\n                Add Column\n              </button>\n            </div>\n            \n            {/* Sample data section (now updates actual value) */}\n            {field.columns?.length > 0 && (\n              <div style={{ marginTop: '1.5rem' }}>\n                <label className=\"form-label\" style={{ marginBottom: '0.5rem' }}>\n                  Sample Rows\n                  <span style={{ fontWeight: 'normal', fontStyle: 'italic', marginLeft: '0.5rem', fontSize: '0.75rem', color: '#6b7280' }}>\n                    (Will appear in the form)\n                  </span>\n                </label>\n                \n                {/* Display sample rows */}\n                {field.value && field.value.length > 0 ? (\n                  <div style={{ marginBottom: '1rem', overflowX: 'auto' }}>\n                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                      <thead>\n                        <tr>\n                          {field.columns.map((col, idx) => (\n                            <th key={idx} style={{ \n                              padding: '0.375rem', \n                              backgroundColor: '#f9fafb',\n                              border: '1px solid #e5e7eb',\n                              textAlign: 'left',\n                              fontSize: '0.75rem'\n                            }}>\n                              {col.name}\n                            </th>\n                          ))}\n                          <th style={{ width: '40px', backgroundColor: '#f9fafb', border: '1px solid #e5e7eb' }}></th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {field.value.map((row, rowIdx) => (\n                          <tr key={rowIdx}>\n                            {field.columns.map((col, colIdx) => (\n                              <td key={colIdx} style={{ padding: '0.25rem', border: '1px solid #e5e7eb' }}>\n                                <input\n                                  type=\"text\"\n                                  value={row[col.name] || ''}\n                                  onChange={(e) => handleTestCellChange(rowIdx, col.name, e.target.value)}\n                                  className=\"input\"\n                                  style={{ \n                                    height: '1.75rem', \n                                    padding: '0.25rem',\n                                    fontSize: '0.75rem',\n                                    border: 'none',\n                                    boxShadow: 'none'\n                                  }}\n                                />\n                              </td>\n                            ))}\n                            <td style={{ padding: '0.25rem', border: '1px solid #e5e7eb', textAlign: 'center' }}>\n                              <button\n                                type=\"button\"\n                                onClick={() => handleRemoveTestRow(rowIdx)}\n                                style={{ \n                                  backgroundColor: '#f87171',\n                                  color: 'white',\n                                  border: 'none',\n                                  borderRadius: '0.25rem',\n                                  width: '18px',\n                                  height: '18px',\n                                  display: 'inline-flex',\n                                  alignItems: 'center',\n                                  justifyContent: 'center',\n                                  fontSize: '0.625rem',\n                                  padding: 0,\n                                  cursor: 'pointer'\n                                }}\n                              >\n                                ✕\n                              </button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                ) : (\n                  <div style={{ \n                    padding: '0.5rem', \n                    backgroundColor: '#f9fafb', \n                    borderRadius: '0.25rem',\n                    marginBottom: '0.5rem',\n                    fontSize: '0.75rem',\n                    color: '#6b7280',\n                    textAlign: 'center'\n                  }}>\n                    No sample rows added yet\n                  </div>\n                )}\n                \n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  onClick={handleAddTestRow}\n                  style={{ marginTop: '0.5rem', fontSize: '0.75rem' }}\n                >\n                  Add Sample Row\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FieldConfigPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}