{"ast":null,"code":"import { api } from './apiConfig';\n\n// Token management\nconst TOKEN_KEY = 'token';\nconst tokenService = {\n  set: token => localStorage.setItem(TOKEN_KEY, token),\n  remove: () => localStorage.removeItem(TOKEN_KEY),\n  exists: () => !!localStorage.getItem(TOKEN_KEY)\n};\n\n// Auth service\nexport const authService = {\n  login: async credentials => {\n    const {\n      data\n    } = await api.post('/auth/login', credentials);\n    tokenService.set(data.token);\n    return data;\n  },\n  register: async userData => {\n    const {\n      data\n    } = await api.post('/auth/register', userData);\n    tokenService.set(data.token);\n    return data;\n  },\n  logout: () => tokenService.remove(),\n  getCurrentUser: async () => {\n    if (!tokenService.exists()) return null;\n    const {\n      data\n    } = await api.get('/auth/me');\n    return data;\n  },\n  isAuthenticated: () => tokenService.exists()\n};","map":{"version":3,"names":["api","TOKEN_KEY","tokenService","set","token","localStorage","setItem","remove","removeItem","exists","getItem","authService","login","credentials","data","post","register","userData","logout","getCurrentUser","get","isAuthenticated"],"sources":["/Users/judyyip/Downloads/Website/Marketing Campaign/frontend/src/api/authService.js"],"sourcesContent":["import { api } from './apiConfig';\n\n// Token management\nconst TOKEN_KEY = 'token';\n\nconst tokenService = {\n  set: token => localStorage.setItem(TOKEN_KEY, token),\n  remove: () => localStorage.removeItem(TOKEN_KEY),\n  exists: () => !!localStorage.getItem(TOKEN_KEY)\n};\n\n// Auth service\nexport const authService = {\n  login: async credentials => {\n    const { data } = await api.post('/auth/login', credentials);\n    tokenService.set(data.token);\n    return data;\n  },\n\n  register: async userData => {\n    const { data } = await api.post('/auth/register', userData);\n    tokenService.set(data.token);\n    return data;\n  },\n\n  logout: () => tokenService.remove(),\n\n  getCurrentUser: async () => {\n    if (!tokenService.exists()) return null;\n    const { data } = await api.get('/auth/me');\n    return data;\n  },\n\n  isAuthenticated: () => tokenService.exists()\n}; "],"mappings":"AAAA,SAASA,GAAG,QAAQ,aAAa;;AAEjC;AACA,MAAMC,SAAS,GAAG,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACnBC,GAAG,EAAEC,KAAK,IAAIC,YAAY,CAACC,OAAO,CAACL,SAAS,EAAEG,KAAK,CAAC;EACpDG,MAAM,EAAEA,CAAA,KAAMF,YAAY,CAACG,UAAU,CAACP,SAAS,CAAC;EAChDQ,MAAM,EAAEA,CAAA,KAAM,CAAC,CAACJ,YAAY,CAACK,OAAO,CAACT,SAAS;AAChD,CAAC;;AAED;AACA,OAAO,MAAMU,WAAW,GAAG;EACzBC,KAAK,EAAE,MAAMC,WAAW,IAAI;IAC1B,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAC,aAAa,EAAEF,WAAW,CAAC;IAC3DX,YAAY,CAACC,GAAG,CAACW,IAAI,CAACV,KAAK,CAAC;IAC5B,OAAOU,IAAI;EACb,CAAC;EAEDE,QAAQ,EAAE,MAAMC,QAAQ,IAAI;IAC1B,MAAM;MAAEH;IAAK,CAAC,GAAG,MAAMd,GAAG,CAACe,IAAI,CAAC,gBAAgB,EAAEE,QAAQ,CAAC;IAC3Df,YAAY,CAACC,GAAG,CAACW,IAAI,CAACV,KAAK,CAAC;IAC5B,OAAOU,IAAI;EACb,CAAC;EAEDI,MAAM,EAAEA,CAAA,KAAMhB,YAAY,CAACK,MAAM,CAAC,CAAC;EAEnCY,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI,CAACjB,YAAY,CAACO,MAAM,CAAC,CAAC,EAAE,OAAO,IAAI;IACvC,MAAM;MAAEK;IAAK,CAAC,GAAG,MAAMd,GAAG,CAACoB,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAON,IAAI;EACb,CAAC;EAEDO,eAAe,EAAEA,CAAA,KAAMnB,YAAY,CAACO,MAAM,CAAC;AAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}