{"ast":null,"code":"import axios from 'axios';\n\n// Define the API base URL\nconst BASE_API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Create an axios instance with default config\nconst api = axios.create({\n  baseURL: BASE_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000\n});\n\n// Request interceptor for logging and authentication\napi.interceptors.request.use(config => {\n  // Log all API requests in development\n  if (process.env.NODE_ENV === 'development') {\n    var _config$method;\n    console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  }\n\n  // Add authentication token if available\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  // Log API responses in development\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`API Response: ${response.status}`, response.data);\n  }\n  return response;\n}, error => {\n  if (error.response) {\n    // Server returned an error response\n    console.error(`API Error ${error.response.status}:`, error.response.data);\n\n    // Handle authentication errors\n    if (error.response.status === 401) {\n      localStorage.removeItem('token');\n      // Redirect to login page\n      window.location.href = '/login';\n    }\n  } else if (error.request) {\n    // Request made but no response received\n    console.error('API No Response Error:', error.request);\n  } else {\n    // Error setting up request\n    console.error('API Setup Error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// API utility functions for common operations\nconst apiUtils = {\n  // Forms\n  getForms: () => api.get('/forms'),\n  getForm: id => api.get(`/forms/${id}`),\n  createForm: formData => api.post('/forms', formData),\n  updateForm: (id, formData) => api.put(`/forms/${id}`, formData),\n  deleteForm: id => api.delete(`/forms/${id}`),\n  // Form submissions\n  submitForm: (formId, responseData) => api.post(`/forms/${formId}/submit`, responseData),\n  getSubmissions: formId => api.get(`/forms/${formId}/submissions`),\n  // Health check\n  checkHealth: () => api.get('/health')\n};\nexport { api, apiUtils, BASE_API_URL };","map":{"version":3,"names":["axios","BASE_API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","NODE_ENV","_config$method","console","log","method","toUpperCase","url","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","data","removeItem","window","location","href","message","apiUtils","getForms","get","getForm","id","createForm","formData","post","updateForm","put","deleteForm","delete","submitForm","formId","responseData","getSubmissions","checkHealth"],"sources":["/Users/judyyip/Downloads/Website/Marketing Campaign/frontend/src/api/apiConfig.js"],"sourcesContent":["import axios from 'axios';\n\n// Define the API base URL\nconst BASE_API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Create an axios instance with default config\nconst api = axios.create({\n  baseURL: BASE_API_URL,\n  headers: { 'Content-Type': 'application/json' },\n  timeout: 10000\n});\n\n// Request interceptor for logging and authentication\napi.interceptors.request.use(\n  config => {\n    // Log all API requests in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    }\n    \n    // Add authentication token if available\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    return config;\n  },\n  error => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  response => {\n    // Log API responses in development\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`API Response: ${response.status}`, response.data);\n    }\n    return response;\n  },\n  error => {\n    if (error.response) {\n      // Server returned an error response\n      console.error(`API Error ${error.response.status}:`, error.response.data);\n      \n      // Handle authentication errors\n      if (error.response.status === 401) {\n        localStorage.removeItem('token');\n        // Redirect to login page\n        window.location.href = '/login';\n      }\n    } else if (error.request) {\n      // Request made but no response received\n      console.error('API No Response Error:', error.request);\n    } else {\n      // Error setting up request\n      console.error('API Setup Error:', error.message);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// API utility functions for common operations\nconst apiUtils = {\n  // Forms\n  getForms: () => api.get('/forms'),\n  getForm: (id) => api.get(`/forms/${id}`),\n  createForm: (formData) => api.post('/forms', formData),\n  updateForm: (id, formData) => api.put(`/forms/${id}`, formData),\n  deleteForm: (id) => api.delete(`/forms/${id}`),\n  \n  // Form submissions\n  submitForm: (formId, responseData) => api.post(`/forms/${formId}/submit`, responseData),\n  getSubmissions: (formId) => api.get(`/forms/${formId}/submissions`),\n  \n  // Health check\n  checkHealth: () => api.get('/health')\n};\n\nexport { api, apiUtils, BASE_API_URL };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB,CAAC;EAC/CC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;EACR;EACA,IAAIX,OAAO,CAACC,GAAG,CAACW,QAAQ,KAAK,aAAa,EAAE;IAAA,IAAAC,cAAA;IAC1CC,OAAO,CAACC,GAAG,CAAC,iBAAAF,cAAA,GAAgBF,MAAM,CAACK,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,IAAIN,MAAM,CAACO,GAAG,EAAE,CAAC;EAC3E;;EAEA;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTR,MAAM,CAACL,OAAO,CAACgB,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EAEA,OAAOR,MAAM;AACf,CAAC,EACDY,KAAK,IAAI;EACPT,OAAO,CAACS,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC1C,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACApB,GAAG,CAACK,YAAY,CAACkB,QAAQ,CAAChB,GAAG,CAC3BgB,QAAQ,IAAI;EACV;EACA,IAAI1B,OAAO,CAACC,GAAG,CAACW,QAAQ,KAAK,aAAa,EAAE;IAC1CE,OAAO,CAACC,GAAG,CAAC,iBAAiBW,QAAQ,CAACC,MAAM,EAAE,EAAED,QAAQ,CAACE,IAAI,CAAC;EAChE;EACA,OAAOF,QAAQ;AACjB,CAAC,EACDH,KAAK,IAAI;EACP,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACAZ,OAAO,CAACS,KAAK,CAAC,aAAaA,KAAK,CAACG,QAAQ,CAACC,MAAM,GAAG,EAAEJ,KAAK,CAACG,QAAQ,CAACE,IAAI,CAAC;;IAEzE;IACA,IAAIL,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACjCP,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;MAChC;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF,CAAC,MAAM,IAAIT,KAAK,CAACd,OAAO,EAAE;IACxB;IACAK,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACd,OAAO,CAAC;EACxD,CAAC,MAAM;IACL;IACAK,OAAO,CAACS,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACU,OAAO,CAAC;EAClD;EAEA,OAAOT,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMW,QAAQ,GAAG;EACf;EACAC,QAAQ,EAAEA,CAAA,KAAMhC,GAAG,CAACiC,GAAG,CAAC,QAAQ,CAAC;EACjCC,OAAO,EAAGC,EAAE,IAAKnC,GAAG,CAACiC,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;EACxCC,UAAU,EAAGC,QAAQ,IAAKrC,GAAG,CAACsC,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;EACtDE,UAAU,EAAEA,CAACJ,EAAE,EAAEE,QAAQ,KAAKrC,GAAG,CAACwC,GAAG,CAAC,UAAUL,EAAE,EAAE,EAAEE,QAAQ,CAAC;EAC/DI,UAAU,EAAGN,EAAE,IAAKnC,GAAG,CAAC0C,MAAM,CAAC,UAAUP,EAAE,EAAE,CAAC;EAE9C;EACAQ,UAAU,EAAEA,CAACC,MAAM,EAAEC,YAAY,KAAK7C,GAAG,CAACsC,IAAI,CAAC,UAAUM,MAAM,SAAS,EAAEC,YAAY,CAAC;EACvFC,cAAc,EAAGF,MAAM,IAAK5C,GAAG,CAACiC,GAAG,CAAC,UAAUW,MAAM,cAAc,CAAC;EAEnE;EACAG,WAAW,EAAEA,CAAA,KAAM/C,GAAG,CAACiC,GAAG,CAAC,SAAS;AACtC,CAAC;AAED,SAASjC,GAAG,EAAE+B,QAAQ,EAAEnC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}