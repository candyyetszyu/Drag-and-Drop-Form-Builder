{"ast":null,"code":"import { useState } from 'react';\nimport { api } from '../api/apiConfig';\nexport const useFormSubmission = () => {\n  const [submitted, setSubmitted] = useState(false);\n  const [submissionData, setSubmissionData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const submitForm = async (formId, formData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      console.log(`Submitting form ${formId} with data:`, formData);\n\n      // For development testing, create a fallback if API is unavailable\n      let result;\n      try {\n        const response = await api.post(`/forms/${formId}/submit`, formData);\n        result = response.data;\n      } catch (apiError) {\n        console.warn('API submission failed, using mock response:', apiError);\n        // Wait a moment to simulate network delay\n        await new Promise(resolve => setTimeout(resolve, 800));\n        // Create a mock successful response\n        result = {\n          success: true,\n          message: 'Form submitted successfully (simulated)',\n          submissionId: `mock-${Date.now()}`\n        };\n      }\n      setSubmitted(true);\n      setSubmissionData(result);\n      return result;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to submit form';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetSubmission = () => {\n    setSubmitted(false);\n    setSubmissionData(null);\n    setError(null);\n  };\n  return {\n    submitForm,\n    resetSubmission,\n    submitted,\n    submissionData,\n    loading,\n    error\n  };\n};","map":{"version":3,"names":["useState","api","useFormSubmission","submitted","setSubmitted","submissionData","setSubmissionData","loading","setLoading","error","setError","submitForm","formId","formData","console","log","result","response","post","data","apiError","warn","Promise","resolve","setTimeout","success","message","submissionId","Date","now","err","_err$response","_err$response$data","errorMessage","resetSubmission"],"sources":["/Users/judyyip/Downloads/Website/Marketing Campaign/frontend/src/hooks/useFormSubmission.js"],"sourcesContent":["import { useState } from 'react';\nimport { api } from '../api/apiConfig';\n\nexport const useFormSubmission = () => {\n  const [submitted, setSubmitted] = useState(false);\n  const [submissionData, setSubmissionData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const submitForm = async (formId, formData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      console.log(`Submitting form ${formId} with data:`, formData);\n      \n      // For development testing, create a fallback if API is unavailable\n      let result;\n      try {\n        const response = await api.post(`/forms/${formId}/submit`, formData);\n        result = response.data;\n      } catch (apiError) {\n        console.warn('API submission failed, using mock response:', apiError);\n        // Wait a moment to simulate network delay\n        await new Promise(resolve => setTimeout(resolve, 800));\n        // Create a mock successful response\n        result = {\n          success: true,\n          message: 'Form submitted successfully (simulated)',\n          submissionId: `mock-${Date.now()}`\n        };\n      }\n      \n      setSubmitted(true);\n      setSubmissionData(result);\n      return result;\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || 'Failed to submit form';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetSubmission = () => {\n    setSubmitted(false);\n    setSubmissionData(null);\n    setError(null);\n  };\n\n  return {\n    submitForm,\n    resetSubmission,\n    submitted,\n    submissionData,\n    loading,\n    error\n  };\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,GAAG,QAAQ,kBAAkB;AAEtC,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACK,cAAc,EAAEC,iBAAiB,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMW,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,QAAQ,KAAK;IAC7C,IAAI;MACFL,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEdI,OAAO,CAACC,GAAG,CAAC,mBAAmBH,MAAM,aAAa,EAAEC,QAAQ,CAAC;;MAE7D;MACA,IAAIG,MAAM;MACV,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,UAAUN,MAAM,SAAS,EAAEC,QAAQ,CAAC;QACpEG,MAAM,GAAGC,QAAQ,CAACE,IAAI;MACxB,CAAC,CAAC,OAAOC,QAAQ,EAAE;QACjBN,OAAO,CAACO,IAAI,CAAC,6CAA6C,EAAED,QAAQ,CAAC;QACrE;QACA,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;QACtD;QACAP,MAAM,GAAG;UACPS,OAAO,EAAE,IAAI;UACbC,OAAO,EAAE,yCAAyC;UAClDC,YAAY,EAAE,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC;QAClC,CAAC;MACH;MAEAzB,YAAY,CAAC,IAAI,CAAC;MAClBE,iBAAiB,CAACU,MAAM,CAAC;MACzB,OAAOA,MAAM;IACf,CAAC,CAAC,OAAOc,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACZ,MAAMC,YAAY,GAAG,EAAAF,aAAA,GAAAD,GAAG,CAACb,QAAQ,cAAAc,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcZ,IAAI,cAAAa,kBAAA,uBAAlBA,kBAAA,CAAoBN,OAAO,KAAI,uBAAuB;MAC3EhB,QAAQ,CAACuB,YAAY,CAAC;MACtB,MAAMH,GAAG;IACX,CAAC,SAAS;MACRtB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM0B,eAAe,GAAGA,CAAA,KAAM;IAC5B9B,YAAY,CAAC,KAAK,CAAC;IACnBE,iBAAiB,CAAC,IAAI,CAAC;IACvBI,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAED,OAAO;IACLC,UAAU;IACVuB,eAAe;IACf/B,SAAS;IACTE,cAAc;IACdE,OAAO;IACPE;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}