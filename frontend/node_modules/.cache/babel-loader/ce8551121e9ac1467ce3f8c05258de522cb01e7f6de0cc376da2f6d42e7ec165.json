{"ast":null,"code":"import React,{useState,useRef}from'react';import{useApi}from'../../hooks/useApi';import{useFormState}from'../../hooks/useFormState';import FieldPalette from'./FieldPalette';import FormCanvas from'./FormCanvas';import FieldConfigPanel from'./FieldConfigPanel';import{DndProvider}from'react-dnd';import{HTML5Backend}from'react-dnd-html5-backend';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FormBuilderPage=()=>{// Add a ref for the field configuration section\nconst configSectionRef=useRef(null);const[fields,setFields]=useState([]);const[selectedField,setSelectedField]=useState(null);const[isPreview,setIsPreview]=useState(false);const{loading,error,post}=useApi();const{formValues,handleInputChange}=useFormState({title:'Untitled Form',description:''});const handleAddField=fieldType=>{console.log(\"Adding field of type:\",fieldType);// Create a new field based on type\nconst newField={id:Date.now().toString(),type:fieldType,question:`New ${fieldType} question`,isRequired:false};// Add type-specific properties\nif(fieldType==='dropdown'){newField.options=[{value:'Option 1',label:'Option 1'},{value:'Option 2',label:'Option 2'}];}else if(fieldType==='table'){newField.columns=[{name:'Column 1',type:'text'},{name:'Column 2',type:'text'}];}else if(fieldType==='text'){newField.minLength=0;newField.maxLength=100;}// Add field to state\nsetFields(prevFields=>[...prevFields,newField]);setSelectedField(newField);console.log(\"Field added:\",newField);};const handleFieldSelection=field=>{console.log(\"Selected field:\",field);setSelectedField(field);// Scroll to the config section when a field is selected\nif(configSectionRef.current){configSectionRef.current.scrollIntoView({behavior:'smooth'});}};const handleFieldUpdate=updatedField=>{console.log(\"Updating field:\",updatedField);// Check if we're updating a single field or the entire fields array\nif(Array.isArray(updatedField)){setFields(updatedField);}else{setFields(prevFields=>prevFields.map(field=>field.id===updatedField.id?updatedField:field));// Update selected field if it's the one being edited\nif(selectedField&&selectedField.id===updatedField.id){setSelectedField(updatedField);}}};const handleFieldDelete=fieldId=>{console.log(\"Deleting field:\",fieldId);setFields(prevFields=>prevFields.filter(field=>field.id!==fieldId));// Clear selection if the deleted field was selected\nif(selectedField&&selectedField.id===fieldId){setSelectedField(null);}};const handleSaveForm=async()=>{try{const formData={...formValues,fields};console.log(\"Saving form:\",formData);const result=await post('/forms',formData);alert('Form saved successfully!');return result;}catch(err){console.error('Error saving form:',err);}};const togglePreview=()=>{console.log(\"Toggling preview mode. Current state:\",isPreview);setIsPreview(!isPreview);};// Handle dropping field from palette to canvas\nconst handleFieldDrop=(fieldType,index)=>{console.log(`Dropped ${fieldType} at index ${index}`);// Create new field with the given type\nconst newField={id:Date.now().toString(),type:fieldType,question:`New ${fieldType} question`,isRequired:false};// Add type-specific properties\nif(fieldType==='dropdown'){newField.options=[{value:'Option 1',label:'Option 1'},{value:'Option 2',label:'Option 2'}];}else if(fieldType==='table'){newField.columns=[{name:'Column 1',type:'text'},{name:'Column 2',type:'text'}];}else if(fieldType==='text'){newField.minLength=0;newField.maxLength=100;}// Insert the field at the specified index\nconst newFields=[...fields];if(index!==undefined&&index>=0){newFields.splice(index,0,newField);}else{newFields.push(newField);}setFields(newFields);setSelectedField(newField);};// Handle reordering fields\nconst handleReorderField=(dragIndex,hoverIndex)=>{const draggedField=fields[dragIndex];// Create a new array without mutating the original\nconst newFields=[...fields];newFields.splice(dragIndex,1);// Remove from old position\nnewFields.splice(hoverIndex,0,draggedField);// Insert at new position\nsetFields(newFields);};// Function to scroll to configuration section\nconst scrollToConfig=()=>{if(configSectionRef.current){configSectionRef.current.scrollIntoView({behavior:'smooth'});}};return/*#__PURE__*/_jsx(DndProvider,{backend:HTML5Backend,children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"padding-responsive\",children:[/*#__PURE__*/_jsx(\"h1\",{children:isPreview?'Form Preview':'Form Builder'}),!isPreview&&selectedField&&/*#__PURE__*/_jsx(\"div\",{onClick:scrollToConfig,style:{cursor:'pointer',textDecoration:'underline',color:'#2563eb',marginTop:'0.5rem',display:'inline-block'},children:\"Jump to Field Configuration \\u2192\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'1rem',margin:'1rem 0'},children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"title\",value:formValues.title,onChange:handleInputChange,className:\"input\",placeholder:\"Form Title\",style:{flex:1}}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary\",onClick:togglePreview,children:isPreview?'Edit Form':'Preview Form'}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:handleSaveForm,disabled:loading,children:loading?'Saving...':'Save Form'})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"form-error\",children:error})]}),/*#__PURE__*/_jsxs(\"main\",{style:{display:'flex',gap:'1rem',minHeight:'500px'},children:[!isPreview&&/*#__PURE__*/_jsx(\"aside\",{className:\"padding-responsive\",style:{width:'250px'},children:/*#__PURE__*/_jsx(FieldPalette,{onFieldSelect:handleAddField,onDragDrop:handleFieldDrop})}),/*#__PURE__*/_jsx(\"section\",{className:\"padding-responsive\",style:{flex:1},children:/*#__PURE__*/_jsx(FormCanvas,{fields:fields,isPreview:isPreview,onFieldSelect:handleFieldSelection,onFieldUpdate:handleFieldUpdate,onFieldDelete:handleFieldDelete,onDrop:handleFieldDrop,onReorder:handleReorderField,formId:\"preview\"})}),!isPreview&&selectedField&&/*#__PURE__*/_jsxs(\"aside\",{className:\"padding-responsive\",style:{width:'300px',backgroundColor:'#ffffff',border:'1px solid #e5e7eb',borderRadius:'0.5rem',boxShadow:'0 1px 3px rgba(0, 0, 0, 0.1)'},ref:configSectionRef,id:\"field-configuration\",children:[/*#__PURE__*/_jsx(\"h2\",{style:{paddingBottom:'0.5rem',marginBottom:'0.5rem',borderBottom:'1px solid #e5e7eb',fontWeight:'600',fontSize:'1.125rem',color:'#111827'},children:\"Field Configuration\"}),/*#__PURE__*/_jsx(FieldConfigPanel,{field:selectedField,onFieldUpdate:handleFieldUpdate})]})]})]})});};export default FormBuilderPage;","map":{"version":3,"names":["React","useState","useRef","useApi","useFormState","FieldPalette","FormCanvas","FieldConfigPanel","DndProvider","HTML5Backend","jsx","_jsx","jsxs","_jsxs","FormBuilderPage","configSectionRef","fields","setFields","selectedField","setSelectedField","isPreview","setIsPreview","loading","error","post","formValues","handleInputChange","title","description","handleAddField","fieldType","console","log","newField","id","Date","now","toString","type","question","isRequired","options","value","label","columns","name","minLength","maxLength","prevFields","handleFieldSelection","field","current","scrollIntoView","behavior","handleFieldUpdate","updatedField","Array","isArray","map","handleFieldDelete","fieldId","filter","handleSaveForm","formData","result","alert","err","togglePreview","handleFieldDrop","index","newFields","undefined","splice","push","handleReorderField","dragIndex","hoverIndex","draggedField","scrollToConfig","backend","children","className","onClick","style","cursor","textDecoration","color","marginTop","display","gap","margin","onChange","placeholder","flex","disabled","minHeight","width","onFieldSelect","onDragDrop","onFieldUpdate","onFieldDelete","onDrop","onReorder","formId","backgroundColor","border","borderRadius","boxShadow","ref","paddingBottom","marginBottom","borderBottom","fontWeight","fontSize"],"sources":["/Users/judyyip/Downloads/Website/Marketing Campaign/frontend/src/components/builder/FormBuilderPage.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { useApi } from '../../hooks/useApi';\nimport { useFormState } from '../../hooks/useFormState';\nimport FieldPalette from './FieldPalette';\nimport FormCanvas from './FormCanvas';\nimport FieldConfigPanel from './FieldConfigPanel';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nconst FormBuilderPage = () => {\n  // Add a ref for the field configuration section\n  const configSectionRef = useRef(null);\n  \n  const [fields, setFields] = useState([]);\n  const [selectedField, setSelectedField] = useState(null);\n  const [isPreview, setIsPreview] = useState(false);\n  const { loading, error, post } = useApi();\n  const { formValues, handleInputChange } = useFormState({\n    title: 'Untitled Form',\n    description: '',\n  });\n\n  const handleAddField = (fieldType) => {\n    console.log(\"Adding field of type:\", fieldType);\n    \n    // Create a new field based on type\n    const newField = {\n      id: Date.now().toString(),\n      type: fieldType,\n      question: `New ${fieldType} question`,\n      isRequired: false,\n    };\n    \n    // Add type-specific properties\n    if (fieldType === 'dropdown') {\n      newField.options = [\n        { value: 'Option 1', label: 'Option 1' },\n        { value: 'Option 2', label: 'Option 2' }\n      ];\n    } else if (fieldType === 'table') {\n      newField.columns = [\n        { name: 'Column 1', type: 'text' },\n        { name: 'Column 2', type: 'text' }\n      ];\n    } else if (fieldType === 'text') {\n      newField.minLength = 0;\n      newField.maxLength = 100;\n    }\n    \n    // Add field to state\n    setFields(prevFields => [...prevFields, newField]);\n    setSelectedField(newField);\n    \n    console.log(\"Field added:\", newField);\n  };\n\n  const handleFieldSelection = (field) => {\n    console.log(\"Selected field:\", field);\n    setSelectedField(field);\n    \n    // Scroll to the config section when a field is selected\n    if (configSectionRef.current) {\n      configSectionRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const handleFieldUpdate = (updatedField) => {\n    console.log(\"Updating field:\", updatedField);\n    \n    // Check if we're updating a single field or the entire fields array\n    if (Array.isArray(updatedField)) {\n      setFields(updatedField);\n    } else {\n      setFields(prevFields => \n        prevFields.map(field => \n          field.id === updatedField.id ? updatedField : field\n        )\n      );\n      \n      // Update selected field if it's the one being edited\n      if (selectedField && selectedField.id === updatedField.id) {\n        setSelectedField(updatedField);\n      }\n    }\n  };\n\n  const handleFieldDelete = (fieldId) => {\n    console.log(\"Deleting field:\", fieldId);\n    \n    setFields(prevFields => prevFields.filter(field => field.id !== fieldId));\n    \n    // Clear selection if the deleted field was selected\n    if (selectedField && selectedField.id === fieldId) {\n      setSelectedField(null);\n    }\n  };\n\n  const handleSaveForm = async () => {\n    try {\n      const formData = {\n        ...formValues,\n        fields,\n      };\n      \n      console.log(\"Saving form:\", formData);\n      \n      const result = await post('/forms', formData);\n      alert('Form saved successfully!');\n      return result;\n    } catch (err) {\n      console.error('Error saving form:', err);\n    }\n  };\n\n  const togglePreview = () => {\n    console.log(\"Toggling preview mode. Current state:\", isPreview);\n    setIsPreview(!isPreview);\n  };\n\n  // Handle dropping field from palette to canvas\n  const handleFieldDrop = (fieldType, index) => {\n    console.log(`Dropped ${fieldType} at index ${index}`);\n    \n    // Create new field with the given type\n    const newField = {\n      id: Date.now().toString(),\n      type: fieldType,\n      question: `New ${fieldType} question`,\n      isRequired: false,\n    };\n    \n    // Add type-specific properties\n    if (fieldType === 'dropdown') {\n      newField.options = [\n        { value: 'Option 1', label: 'Option 1' },\n        { value: 'Option 2', label: 'Option 2' }\n      ];\n    } else if (fieldType === 'table') {\n      newField.columns = [\n        { name: 'Column 1', type: 'text' },\n        { name: 'Column 2', type: 'text' }\n      ];\n    } else if (fieldType === 'text') {\n      newField.minLength = 0;\n      newField.maxLength = 100;\n    }\n    \n    // Insert the field at the specified index\n    const newFields = [...fields];\n    if (index !== undefined && index >= 0) {\n      newFields.splice(index, 0, newField);\n    } else {\n      newFields.push(newField);\n    }\n    \n    setFields(newFields);\n    setSelectedField(newField);\n  };\n\n  // Handle reordering fields\n  const handleReorderField = (dragIndex, hoverIndex) => {\n    const draggedField = fields[dragIndex];\n    \n    // Create a new array without mutating the original\n    const newFields = [...fields];\n    newFields.splice(dragIndex, 1); // Remove from old position\n    newFields.splice(hoverIndex, 0, draggedField); // Insert at new position\n    \n    setFields(newFields);\n  };\n\n  // Function to scroll to configuration section\n  const scrollToConfig = () => {\n    if (configSectionRef.current) {\n      configSectionRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"container\">\n        <header className=\"padding-responsive\">\n          <h1>{isPreview ? 'Form Preview' : 'Form Builder'}</h1>\n          \n          {!isPreview && selectedField && (\n            <div \n              onClick={scrollToConfig} \n              style={{\n                cursor: 'pointer',\n                textDecoration: 'underline',\n                color: '#2563eb',\n                marginTop: '0.5rem',\n                display: 'inline-block'\n              }}\n            >\n              Jump to Field Configuration →\n            </div>\n          )}\n          \n          <div style={{ display: 'flex', gap: '1rem', margin: '1rem 0' }}>\n            <input\n              type=\"text\"\n              name=\"title\"\n              value={formValues.title}\n              onChange={handleInputChange}\n              className=\"input\"\n              placeholder=\"Form Title\"\n              style={{ flex: 1 }}\n            />\n            <button \n              className=\"btn btn-secondary\"\n              onClick={togglePreview}\n            >\n              {isPreview ? 'Edit Form' : 'Preview Form'}\n            </button>\n            <button \n              className=\"btn btn-primary\"\n              onClick={handleSaveForm}\n              disabled={loading}\n            >\n              {loading ? 'Saving...' : 'Save Form'}\n            </button>\n          </div>\n          {error && <div className=\"form-error\">{error}</div>}\n        </header>\n        \n        <main style={{ display: 'flex', gap: '1rem', minHeight: '500px' }}>\n          {!isPreview && (\n            <aside className=\"padding-responsive\" style={{ width: '250px' }}>\n              <FieldPalette onFieldSelect={handleAddField} onDragDrop={handleFieldDrop} />\n            </aside>\n          )}\n          \n          <section className=\"padding-responsive\" style={{ flex: 1 }}>\n            <FormCanvas\n              fields={fields}\n              isPreview={isPreview}\n              onFieldSelect={handleFieldSelection}\n              onFieldUpdate={handleFieldUpdate}\n              onFieldDelete={handleFieldDelete}\n              onDrop={handleFieldDrop}\n              onReorder={handleReorderField}\n              formId=\"preview\"\n            />\n          </section>\n          \n          {!isPreview && selectedField && (\n            <aside \n              className=\"padding-responsive\" \n              style={{ \n                width: '300px',\n                backgroundColor: '#ffffff',\n                border: '1px solid #e5e7eb',\n                borderRadius: '0.5rem',\n                boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'\n              }}\n              ref={configSectionRef}\n              id=\"field-configuration\"\n            >\n              <h2 style={{ \n                paddingBottom: '0.5rem',\n                marginBottom: '0.5rem',\n                borderBottom: '1px solid #e5e7eb',\n                fontWeight: '600',\n                fontSize: '1.125rem',\n                color: '#111827'\n              }}>\n                Field Configuration\n              </h2>\n              <FieldConfigPanel \n                field={selectedField} \n                onFieldUpdate={handleFieldUpdate} \n              />\n            </aside>\n          )}\n        </main>\n      </div>\n    </DndProvider>\n  );\n};\n\nexport default FormBuilderPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}