{"ast":null,"code":"import axios from 'axios';\n\n// Define the API base URL\nconst BASE_API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Create an axios instance with default configuration\nconst api = axios.create({\n  baseURL: BASE_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // Set a timeout for API requests\n});\n\n// Add request interceptor for logging and authentication\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  // Add authentication token if available\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`API Response: ${response.status}`, response.data);\n  return response;\n}, error => {\n  if (error.response) {\n    console.error(`API Error (${error.response.status}):`, error.response.data);\n  } else if (error.request) {\n    console.error('API Error: No response received', error.request);\n  } else {\n    console.error('API Error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Utility functions for common API operations\nconst apiUtils = {\n  get: url => api.get(url).then(response => response.data),\n  post: (url, data) => api.post(url, data).then(response => response.data),\n  put: (url, data) => api.put(url, data).then(response => response.data),\n  delete: url => api.delete(url).then(response => response.data)\n};\nexport { api, apiUtils, BASE_API_URL };","map":{"version":3,"names":["axios","BASE_API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","data","message","apiUtils","get","then","post","put","delete"],"sources":["/Users/judyyip/Downloads/Website/Marketing Campaign/frontend/src/api/apiConfig.js"],"sourcesContent":["import axios from 'axios';\n\n// Define the API base URL\nconst BASE_API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Create an axios instance with default configuration\nconst api = axios.create({\n  baseURL: BASE_API_URL,\n  headers: { 'Content-Type': 'application/json' },\n  timeout: 10000 // Set a timeout for API requests\n});\n\n// Add request interceptor for logging and authentication\napi.interceptors.request.use(\n  (config) => {\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    // Add authentication token if available\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    console.log(`API Response: ${response.status}`, response.data);\n    return response;\n  },\n  (error) => {\n    if (error.response) {\n      console.error(`API Error (${error.response.status}):`, error.response.data);\n    } else if (error.request) {\n      console.error('API Error: No response received', error.request);\n    } else {\n      console.error('API Error:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Utility functions for common API operations\nconst apiUtils = {\n  get: (url) => api.get(url).then((response) => response.data),\n  post: (url, data) => api.post(url, data).then((response) => response.data),\n  put: (url, data) => api.put(url, data).then((response) => response.data),\n  delete: (url) => api.delete(url).then((response) => response.data),\n};\n\nexport { api, apiUtils, BASE_API_URL };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IAAE,cAAc,EAAE;EAAmB,CAAC;EAC/CC,OAAO,EAAE,KAAK,CAAC;AACjB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACVC,OAAO,CAACC,GAAG,CAAC,iBAAAF,cAAA,GAAgBD,MAAM,CAACI,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,IAAIL,MAAM,CAACM,GAAG,EAAE,CAAC;EACzE;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTP,MAAM,CAACL,OAAO,CAACe,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOP,MAAM;AACf,CAAC,EACAW,KAAK,IAAK;EACTT,OAAO,CAACS,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC1C,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAnB,GAAG,CAACK,YAAY,CAACiB,QAAQ,CAACf,GAAG,CAC1Be,QAAQ,IAAK;EACZZ,OAAO,CAACC,GAAG,CAAC,iBAAiBW,QAAQ,CAACC,MAAM,EAAE,EAAED,QAAQ,CAACE,IAAI,CAAC;EAC9D,OAAOF,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClBZ,OAAO,CAACS,KAAK,CAAC,cAAcA,KAAK,CAACG,QAAQ,CAACC,MAAM,IAAI,EAAEJ,KAAK,CAACG,QAAQ,CAACE,IAAI,CAAC;EAC7E,CAAC,MAAM,IAAIL,KAAK,CAACb,OAAO,EAAE;IACxBI,OAAO,CAACS,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACb,OAAO,CAAC;EACjE,CAAC,MAAM;IACLI,OAAO,CAACS,KAAK,CAAC,YAAY,EAAEA,KAAK,CAACM,OAAO,CAAC;EAC5C;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMO,QAAQ,GAAG;EACfC,GAAG,EAAGb,GAAG,IAAKd,GAAG,CAAC2B,GAAG,CAACb,GAAG,CAAC,CAACc,IAAI,CAAEN,QAAQ,IAAKA,QAAQ,CAACE,IAAI,CAAC;EAC5DK,IAAI,EAAEA,CAACf,GAAG,EAAEU,IAAI,KAAKxB,GAAG,CAAC6B,IAAI,CAACf,GAAG,EAAEU,IAAI,CAAC,CAACI,IAAI,CAAEN,QAAQ,IAAKA,QAAQ,CAACE,IAAI,CAAC;EAC1EM,GAAG,EAAEA,CAAChB,GAAG,EAAEU,IAAI,KAAKxB,GAAG,CAAC8B,GAAG,CAAChB,GAAG,EAAEU,IAAI,CAAC,CAACI,IAAI,CAAEN,QAAQ,IAAKA,QAAQ,CAACE,IAAI,CAAC;EACxEO,MAAM,EAAGjB,GAAG,IAAKd,GAAG,CAAC+B,MAAM,CAACjB,GAAG,CAAC,CAACc,IAAI,CAAEN,QAAQ,IAAKA,QAAQ,CAACE,IAAI;AACnE,CAAC;AAED,SAASxB,GAAG,EAAE0B,QAAQ,EAAE9B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}